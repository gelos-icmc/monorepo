# Action CI
# Roda todos os `checks` do flake em paralelo
# 
# VocÃª pode rodar eles localmente usando `nix flake check .`

name: "CI"
on:
  push:
    branches: [ "**" ]
  pull_request:
  merge_group:
jobs:
  nix-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v31
      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -euo pipefail
          matrix="$(nix eval --json '.#githubActions.matrix')"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
          echo "$matrix" | jq

  nix-build:
    name: ${{ matrix.name }} (${{ matrix.system }})
    needs: nix-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Give me all the errors.
      matrix: ${{fromJSON(needs.nix-matrix.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
      - uses: wimpysworld/nothing-but-nix@bfeb418c0047173b701321078aca83b342e77ec2
      - uses: cachix/install-nix-action@v31
      - uses: cachix/cachix-action@v14
        with:
          name: gelos-icmc
          authToken: '${{ secrets.CACHIX_KEY }}'
      - run: nix build -L '.#${{ matrix.attr }}'

  required: # group all required workflows into one to avoid reconfiguring this in Actions settings
    needs:
      - nix-matrix
      - nix-build
    if: ${{ always() && !contains(needs.*.result, 'cancelled') }}
    runs-on: ubuntu-latest
    steps:
      - run: ${{ contains(needs.*.result, 'failure') && 'false' || 'true' }}
