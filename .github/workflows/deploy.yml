# Action Deploy
# Roda `apps.deploy` para cada host em paralelo
# 
# VocÃª pode executar isso localmente usando `nix run .#deploy`
# (Requer uma chave SSH autorizada nos hosts)

name: "Deploy"
on:
  push:
    branches: [ main ]
concurrency:
  group: ${{ github.workflow }}
jobs:
  nix-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@v30
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-matrix-deploy
      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -euo pipefail
          matrix="$(nix eval --json '.#deploy.nodes' --apply 'builtins.attrNames')"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
          echo "$matrix" | jq

  deploy:
    name: ${{ matrix.hostname }}
    needs: nix-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        hostname: ${{fromJSON(needs.nix-matrix.outputs.matrix)}}
    environment:
      name: Prod
    steps:
      - uses: actions/checkout@v3
      - uses: wimpysworld/nothing-but-nix@bfeb418c0047173b701321078aca83b342e77ec2
        with:
          nix-permission-edict: true
          hatchet-protocol: carve
      - uses: nixbuild/nix-quick-install-action@v30
      - uses: cachix/cachix-action@v14
        with:
          name: gelos-icmc
          authToken: '${{ secrets.CACHIX_KEY }}'
      - uses: webfactory/ssh-agent@v0.6.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      - name: Deploy
        run: nix run .#deploy -- '.#${{ matrix.hostname }}' --skip-checks
